{
  "dp_template": {
    "prefix": "dp_template",
    "body": [
      "dadkajdfadf"
    ],
    "description": "Template for dp_template"
  },
  "test_function": {
    "prefix": "test_function",
    "body": [
      "def test_fun():\r",
      "    print(\"Test function called\")"
    ],
    "description": "Template for test_function"
  },
  "unionfind": {
    "prefix": "uf",
    "body": [
      "class UnionFind:",
      "    def __init__(self, size):",
      "        self.parent = [i for i in range(size)]",
      "        self.rank = [0] * size",
      "",
      "    def find(self, x):",
      "        if self.parent[x] != x:",
      "            self.parent[x] = self.find(self.parent[x])",
      "        return self.parent[x]",
      "",
      "    def union(self, x, y):",
      "        root_x = self.find(x)",
      "        root_y = self.find(y)",
      "",
      "        if root_x != root_y:",
      "            if self.rank[root_x] > self.rank[root_y]:",
      "                self.parent[root_y] = root_x",
      "            elif self.rank[root_x] < self.rank[root_y]:",
      "                self.parent[root_x] = root_y",
      "            else:",
      "                self.parent[root_y] = root_x",
      "                self.rank[root_x] += 1",
      "",
      "    def connected(self, x, y):",
      "        return self.find(x) == self.find(y)"
    ],
    "description": "UnionFind data structure implementation"
  },
  "binarysearch": {
    "prefix": "bs",
    "body": [
      "def binary_search(arr, target):",
      "    left, right = 0, len(arr) - 1",
      "    while left <= right:",
      "        mid = (left + right) // 2",
      "        if arr[mid] == target:",
      "            return mid",
      "        elif arr[mid] < target:",
      "            left = mid + 1",
      "        else:",
      "            right = mid - 1",
      "    return -1"
    ],
    "description": "Binary Search implementation"
  },
  "bfs": {
    "prefix": "bfs",
    "body": [
      "def bfs(graph, start):",
      "    visited = set()",
      "    queue = deque([start])",
      "",
      "    while queue:",
      "        node = queue.popleft()",
      "        if node not in visited:",
      "            print(node, end=\" \")",
      "            visited.add(node)",
      "            ",
      "            for neighbor in graph[node]:",
      "                if neighbor not in visited:",
      "                    queue.append(neighbor)"
    ],
    "description": "Breadth-First Search implementation"
  },
  "dfs": {
    "prefix": "dfs",
    "body": [
      "def dfsGraph(root):",
      "    result = []",
      "    stack = []",
      "    stack.append(root)",
      "    while stack:",
      "        node = stack.pop()",
      "        result.append(node.val)",
      "        ",
      "        if node.children:",
      "            for key in node.children:",
      "                if node.children[key] != None:",
      "                    stack.append(node.children[key])",
      "    return result"
    ],
    "description": "Depth-First Search implementation"
  },
  "bitmask": {
    "prefix": "bm",
    "body": [
      "def bitmasking_template(n):",
      "    for mask in range(1 << n):",
      "        subset = []",
      "        for i in range(n):",
      "            if mask & (1 << i):",
      "                subset.append(i)",
      "        print(f\"Mask: {bin(mask)[2:].zfill(n)}, Subset: {subset}\")"
    ],
    "description": "Bitmasking template for generating subsets"
  }
}