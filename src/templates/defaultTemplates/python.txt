class UnionFind:
    def __init__(self, size):
        # Initialize parent and rank arrays
        self.parent = [i for i in range(size)]
        self.rank = [0] * size

    def find(self, x):
        # Path compression
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        # Find roots of the elements
        root_x = self.find(x)
        root_y = self.find(y)

        if root_x != root_y:
            # Union by rank
            if self.rank[root_x] > self.rank[root_y]:
                self.parent[root_y] = root_x
            elif self.rank[root_x] < self.rank[root_y]:
                self.parent[root_x] = root_y
            else:
                self.parent[root_y] = root_x
                self.rank[root_x] += 1

    def connected(self, x, y):
        # Check if two elements are in the same set
        return self.find(x) == self.find(y)

def solve():
    # Your solution here
    pass

def main():
    t = int(input())
    for _ in range(t):
        solve()

def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1

def dynamic_programming(n):
    dp = [0] * (n + 1)
    if n >= 1:
        dp[1] = 1

    for i in range(2, n + 1):
        dp[i] = dp[i - 1] + dp[i - 2]

    return dp[n]

def bfs(graph, start):
    visited = set()  # To track visited nodes
    queue = deque([start])  # Queue to manage the order of exploration

    while queue:
        node = queue.popleft()  # Dequeue from the front of the queue
        if node not in visited:
            print(node, end=" ")  # Process the node
            visited.add(node)  # Mark node as visited
            
            for neighbor in graph[node]:  # Explore each neighbor
                if neighbor not in visited:
                    queue.append(neighbor) 

def dfsGraph(root):
    result = []
    stack = []
    stack.append(root)
    while stack:
        node = stack.pop()
        result.append(node.val)
        
        if node.children:
            for key in node.children:
                if node.children[key] != None:
                    stack.append(node.children[key])
    return result

    
if __name__ == "__main__":
    main()

